import nmap
import mysql.connector
from datetime import datetime
from netAssetDisc_mysql import DB_CONFIG
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed

VULNERS_API = 'https://vulners.com/api/v3/search'

def perform_vulnerability_scan(ip, port=None):
    """Perform vulnerability scan using Nmap Vulners script"""
    try:
        nm = nmap.PortScanner()
        scan_arg = '-sV --script=vulners -T4'
        if port:
            scan_arg += f' -p {port}'

        print(f"[+] Scanning {ip} for vulnerabilities...")
        nm.scan(hosts=ip, arguments=scan_arg)

        conn = mysql.connector.connect(**DB_CONFIG)
        cur = conn.cursor(dictionary=True)

        cur.execute("SELECT id FROM devices WHERE ip = %s LIMIT 1", (ip,))
        row = cur.fetchone()
        if not row:
            print(f"[!] Device with IP {ip} not found in DB. Skipping.")
            conn.close()
            return

        device_id = row['id']
        vuln_entries = []

        for proto in nm[ip].all_protocols():
            for port_num, port_data in nm[ip][proto].items():
                scripts = port_data.get('script')
                if not scripts:
                    continue

                for script_key, script_val in scripts.items():
                    for vuln_line in script_val.splitlines():
                        try:
                            vuln_id, description = vuln_line.split(None, 1)
                        except ValueError:
                            continue

                        severity = 'low'
                        desc_lower = description.lower()
                        if 'critical' in desc_lower or 'high' in desc_lower:
                            severity = 'high'
                        elif 'medium' in desc_lower:
                            severity = 'medium'

                        vuln_entries.append((
                            device_id, ip, port_num, vuln_id, description, severity
                        ))

        if vuln_entries:
            cur.executemany(
                """
                INSERT INTO vulnerabilities 
                (device_id, ip, port, vulnerability_id, vulnerability_description, severity)
                VALUES (%s, %s, %s, %s, %s, %s)
                """,
                vuln_entries
            )
            conn.commit()

        conn.close()
        print(f"[âœ”] Completed scan: {ip}")

    except Exception as e:
        print(f"[!] Error scanning {ip}: {e}")

def perform_api_vulnerability_scan(software_name, version=None):
    response = requests.get(VULNERS_API, params={'query': f"{software_name} {version or ''}"})
    return response.json().get('data', [])

def print_vulnerabilities(id=None, ip=None):
    conn = mysql.connector.connect(**DB_CONFIG)
    cur = conn.cursor(dictionary=True)

    if id:
        cur.execute("SELECT * FROM vulnerabilities WHERE id = %s", (id,))
    elif ip:
        cur.execute("SELECT * FROM vulnerabilities WHERE ip = %s", (ip,))
    else:
        cur.execute("SELECT * FROM vulnerabilities")

    vulnerabilities = cur.fetchall()
    for v in vulnerabilities:
        print(f"Device ID: {v['device_id']} | IP: {v['ip']} | Port: {v['port']} | "
              f"Vulnerability: {v['vulnerability_id']} | Severity: {v['severity']} | "
              f"Desc: {v['vulnerability_description']}")
    conn.close()

def batch_scan_ips(ip_list, max_threads=5):
    print(f"Starting scan for {len(ip_list)} IPs using {max_threads} threads...")
    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        future_to_ip = {executor.submit(perform_vulnerability_scan, ip): ip for ip in ip_list}
        for future in as_completed(future_to_ip):
            ip = future_to_ip[future]
            try:
                future.result()
            except Exception as e:
                print(f"[!] Scan failed for {ip}: {e}")

def test_vulnerability_scan():
    ips = input("Enter comma-separated IPs to scan: ").strip().split(",")
    ips = [ip.strip() for ip in ips if ip.strip()]
    batch_scan_ips(ips, max_threads=5)
    for ip in ips:
        print_vulnerabilities(ip=ip)

if __name__ == "__main__":
    test_vulnerability_scan()
